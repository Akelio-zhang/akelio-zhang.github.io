<?xml-stylesheet href="/rss.xsl" type="text/xsl"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>LIFE CODER</title><link>https://akelio-zhang.github.io/</link><description>Recent content on LIFE CODER</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>2019-2022 Akelio All rights reserved.</copyright><lastBuildDate>Sun, 26 Jun 2022 12:00:00 +0800</lastBuildDate><atom:link href="https://akelio-zhang.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>系统复杂度-1</title><link>https://akelio-zhang.github.io/posts/2020%E7%B3%BB%E7%BB%9F%E5%A4%8D%E6%9D%82%E5%BA%A6-1/</link><pubDate>Sat, 06 Jun 2020 18:00:00 +0000</pubDate><guid>https://akelio-zhang.github.io/posts/2020%E7%B3%BB%E7%BB%9F%E5%A4%8D%E6%9D%82%E5%BA%A6-1/</guid><description>LIFE CODER https://akelio-zhang.github.io/posts/2020%E7%B3%BB%E7%BB%9F%E5%A4%8D%E6%9D%82%E5%BA%A6-1/ -&lt;h1 id="0x1-introduction">0x1 Introduction&lt;/h1>
&lt;p>当你接手一个不熟悉的系统的时候，你可能想找一下系统文档（但是已经很久没更新了）；你可能想看一下有没有单元测试（很多根本跑不起来了）；这时候，除了问同事，只能自己从几千几万行代码中开始摸索。&lt;/p>
&lt;p>当你开发一个新系统的时候，由于某些原因需要调整局部的逻辑，因为没有相应的单元测试，结果在移交给测试后才发现各种顾此失彼的bug出现了。&lt;/p>
&lt;p>当你的系统性能已经无法再满足时，又或者系统的迭代成本异常大时，此时就会可能需要重写或重构。此时，由于没有单元测试，自动化集成测试，你不得不拉上更多的同事来参与此次系统优化，以保证系统的可靠性。&lt;/p>
&lt;p>当你的系统需要有新的客户接入时，因为没有最新的系统文档或使用说明书，你只能电话、口头地来教别人怎么接入你的系统。&lt;/p>
&lt;p>上述的几个场景，都是因为系统的配套设施（文档、测试）没有同步完善，引起接入、迭代、重构的成本显著增加。这不是我们想看到的。相对地，系统的快速迭代的开发模式已经受到了广泛的认同，我们怎么在这个过程能够一直保持高效、可靠的输出呢？对于这个问题，本文尝试从系统复杂度、重构、设计模式、测试这几个角度来讨论这个问题，希望能给大家一些新的思考。&lt;/p>
&lt;h1 id="0x2-系统复杂度">0x2 系统复杂度&lt;/h1>
&lt;p>首先，算法有复杂度一说，在所有的算法课程基本都会在前1-2章围绕这个话题展开详细的定义与分析讨论。算法复杂度一般分为时间复杂度与空间复杂度，可以说是该算法解决问题的时间与空间成本。&lt;/p>
&lt;p>在工作上，我们维护的往往是一个系统，一个工程。一个系统的复杂度定义，似乎并不是那么容易。本章节大多数内容来源于&lt;em>A Philosiphy of Software Designing&lt;/em>。这本书中对于系统的复杂度定义非常的实际，&lt;strong>软件系统结构中让其变得难以理解且难以变更的部分组成了系统的复杂性&lt;/strong>。回顾本文引子部分，其实都是系统难以理解、难以修改导致的结果。&lt;/p>
&lt;p>这个定义相对于算法复杂度而言，显得非常主观，没有客观的评估准则，各个人的理解也会大相径庭。因此，书中进一步展开了几种复杂性症状。&lt;/p>
&lt;ol>
&lt;li>变化放大(change amplication)：当你需要改动某一个逻辑时，会涉及到多处代码变更。&lt;/li>
&lt;li>认知负担(cognitive load)：有时尽管只写了很少的代码，但是对于他人来说异常难以理解，请尝试将它改写成容易理解的方式。&lt;/li>
&lt;li>不可知(unknown unknowns)：不知道哪里有坑存在，就算BUG出现了。&lt;/li>
&lt;/ol>
&lt;p>总的来说，控制住整个系统的复杂度，将是保障我们高效、可靠工作的核心。低复杂度的系统，大大降低了开发过程中的心智压力。&lt;/p>
&lt;h1 id="0x3-测试">0x3 测试&lt;/h1>
&lt;p>为什么要把测试放在靠前的位置呢？测试是将一直伴随在生产代码演进的，是软件的&lt;strong>可靠性&lt;/strong>保证的重要工具。&lt;/p>
&lt;p>拿建筑工程做一个类比，设计一幢房屋时，对于设计人员，最终产出的是施工图。那么，它的设计依据是什么呢？《规范》与模型的承载能力分析。前者，描述了什么类型的结构需要怎么样的设计，这种属于基本要求。后者，通过基于物理建模软件进行专门的结构性能分析，来确保本次设计的&lt;strong>可靠性&lt;/strong>。&lt;/p>
&lt;p>软件工程相比建筑工程，非常年轻，一方面没有条条框框地规则（P3C也仅仅是一些基础性条约）；另一方面，因为大部分软件工程不涉及生命财产，也可以通过快速更新来解决问题，所以导致大多数人对&lt;strong>可靠性&lt;/strong>的关注度远不如建筑工程。先不说这样的态度容易使生产问题频发，另外也会让你的工作开展体验感相对差劲，总是在返工。&lt;/p>
&lt;p>因此，我们需要在注重软件的可靠性。我们的第一个工具就是（自动化）测试。好的测试，就能够有效地模拟真实地业务场景，来校验代码的正确性。好的测试，能够让新加入的开发人员更容易理解系统是如何使用的。好的测试，能够促进系统架构的合理化——高内聚低耦合。但是，好的测试代码并不容易写，因为测试代码的思考方式与一般的coding并不一样，它更像是生产代码的前置条件、运行场景。&lt;/p>
&lt;p>测试通常分为四个层次：单元测试（Unit Testing）、集成测试（Integration Testing）、系统测试（System Testing）、验收测试（Acceptance Testing）。其中离开发最近的是单元测试，一般覆盖的是函数以及类的功能正确性。集成测试则是对系统内部的各模块之间的协作是否正确，通常按内部接口进行覆盖测试。系统测试则是验证对外接口能否在各种情况下能够正常地运行（性能测试也属于这一层次）。验收测试属于辅助性的测试，范围也相对更广，不同的系统也会需要不同的验收测试，例如安全测试、易用性测试、兼容性测试等等。&lt;/p>
&lt;p>这里我们主要谈一下单元测试，因为这是所有测试的基本面，也是开发人员所需要特别关注的地方。先考虑一下是先写生产代码还是先写测试代码。第一个角度是，当然是先写生产代码了，没有生产代码怎么测试呢？第二个角度是，先写测试代码再写生产代码，因为测试代码是功能的运行场景，只有先把这些前置条件搞清楚了，才能写出正确的生产代码。也许你会说，我可以先大脑过一下基本场景，然后再写生产代码，再写测试代码，这应该是大部分人目前的方式，但是不知道你有没有发现，这种方式写出来的测试代码往往会因为前期的假设导致覆盖率很低。&lt;/p>
&lt;p>在2003年，Kent Beck提出了Test-Driven development（TDD）这样一种开发模式。&lt;/p>
&lt;ol>
&lt;li>添加一个测试&lt;/li>
&lt;li>运行所有测试，是否有失败&lt;/li>
&lt;li>一旦有失败的测试，就开始写生产代码，直到该测试通过为止。&lt;/li>
&lt;li>所有测试通过后，就必须开始写测试代码，直到有一个测试无法通过。&lt;/li>
&lt;/ol>
&lt;p>可能，你会觉得这样非常耗时，但是你得明确，你在一个功能开发的耗时并不仅仅是写了那一堆生产代码而已，还包括测试、代码修复等等。所以，这种方式只是将一些顺序进行了调换，却能为最终的正确性铺垫很多。&lt;/p>
&lt;h1 id="0x4-重构">0x4 重构&lt;/h1>
&lt;p>重构与重写都是试图优化系统复杂度的方式，在不同的场景（代码状况、工期等）会选择不同的方式，但是大多时候会采用重构的方式来实现。&lt;/p>
&lt;p>先来看一下wikipedia对重构的定义：&lt;/p>
&lt;p>In &lt;a href="https://en.wikipedia.org/wiki/Computer_programming">computer programming&lt;/a> and &lt;a href="https://en.wikipedia.org/wiki/Software_design">software design&lt;/a>, &lt;strong>code refactoring&lt;/strong> is the process of restructuring existing &lt;a href="https://en.wikipedia.org/wiki/Computer_code">computer code&lt;/a>—changing the &lt;em>&lt;a href="https://en.wikipedia.org/wiki/Decomposition_(computer_science)">factoring&lt;/a>&lt;/em>—without changing its external behavior. Refactoring is intended to improve the design, structure, and/or implementation of the &lt;a href="https://en.wikipedia.org/wiki/Software">software&lt;/a> (its &lt;em>&lt;a href="https://en.wikipedia.org/wiki/Non-functional_requirement">non-functional&lt;/a>&lt;/em> attributes), while preserving its &lt;a href="https://en.wikipedia.org/wiki/Functional_requirement">functionality&lt;/a>. Potential advantages of refactoring may include improved code &lt;a href="https://en.wikipedia.org/wiki/Readability">readability&lt;/a> and reduced &lt;a href="https://en.wikipedia.org/wiki/Cyclomatic_complexity">complexity&lt;/a>; these can improve the &lt;a href="https://en.wikipedia.org/wiki/Source_code">source code&lt;/a>&amp;rsquo;s &lt;a href="https://en.wikipedia.org/wiki/Maintainability">maintainability&lt;/a> and create a simpler, cleaner, or more expressive internal &lt;a href="https://en.wikipedia.org/wiki/Software_architecture">architecture&lt;/a> or &lt;a href="https://en.wikipedia.org/wiki/Object_model">object model&lt;/a> to improve &lt;a href="https://en.wikipedia.org/wiki/Extensibility">extensibility&lt;/a>.&lt;/p>
&lt;p>在系统复杂度膨胀到一定程度后，添加功能异常困难、系统变得难以理解、修改的时候，重构往往就需要开始执行，从而降低系统的复杂度，让我们能够更高效地开发、修改代码。所以重构并不是某一个开发阶段，而是一种开发工具，帮助我们提升效率。&lt;/p>
&lt;p>在《重构》这本书中，提到很多地坏味道，本质就是一些让系统复杂度变高的地方，你可以发现它与第二节中的那些症状很类似。&lt;/p>
&lt;p>这里特别想说的是，重构的过程中，其实会采用不少设计模式，但是并不能说设计模式就是万能药。设计模式是我们需要了解的，但是我们需要记住的是它们出现的目的是什么，我这里可以列举几个：&lt;/p>
&lt;ol>
&lt;li>减少继承，多采用组合的方式来丰富类的功能。&lt;/li>
&lt;li>面对各种功能的变更，能够将变化（影响）的范围尽可能的缩小到1个或者少量的类中。&lt;/li>
&lt;li>面向接口编程。&lt;/li>
&lt;/ol>
&lt;h1 id="0x5-结论">0x5 结论&lt;/h1>
&lt;ol>
&lt;li>除了写好生产代码以外，我们要多多关注一些周边的工具：自动化测试、持续继承、文档等。&lt;/li>
&lt;li>对于一个持续迭代的系统，系统复杂度是需要重点关注的。&lt;/li>
&lt;li>尝试把你的测试代码前置。&lt;/li>
&lt;li>重构能够帮助你降低系统复杂度。&lt;/li>
&lt;li>三次原则：第一次做某件事时只管去做；第二次做类似的事会产生反感（蹩脚），但无论如何还是可以去做；第三次再做类似的事，你就应该重构/反思。&lt;/li>
&lt;/ol>
&lt;h1 id="站在巨人的肩膀上">站在巨人的肩膀上&lt;/h1>
&lt;ol>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Software_testing#Testing_levels">https://en.wikipedia.org/wiki/Software_testing#Testing_levels&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Code_refactoring">https://en.wikipedia.org/wiki/Code_refactoring&lt;/a>&lt;/li>
&lt;li>Ousterhout, John. &lt;em>A Philosophy of Software Design&lt;/em>. Yaknyam Press, 2018.&lt;/li>
&lt;li>Fowler, Martin. &lt;em>Refactoring: improving the design of existing code&lt;/em>. Addison-Wesley Professional, 2018.&lt;/li>
&lt;li>Martin, Robert C. &lt;em>The clean coder: a code of conduct for professional programmers&lt;/em>. Pearson Education, 2011.&lt;/li>
&lt;/ol>
- https://akelio-zhang.github.io/posts/2020%E7%B3%BB%E7%BB%9F%E5%A4%8D%E6%9D%82%E5%BA%A6-1/ - 2019-2022 Akelio All rights reserved.</description></item><item><title>Clean系统读书笔记——两年项目回顾</title><link>https://akelio-zhang.github.io/posts/2020clean%E7%B3%BB%E7%BB%9F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%A4%E5%B9%B4%E9%A1%B9%E7%9B%AE%E5%9B%9E%E9%A1%BE/</link><pubDate>Wed, 27 May 2020 12:00:00 +0800</pubDate><guid>https://akelio-zhang.github.io/posts/2020clean%E7%B3%BB%E7%BB%9F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%A4%E5%B9%B4%E9%A1%B9%E7%9B%AE%E5%9B%9E%E9%A1%BE/</guid><description>LIFE CODER https://akelio-zhang.github.io/posts/2020clean%E7%B3%BB%E7%BB%9F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%A4%E5%B9%B4%E9%A1%B9%E7%9B%AE%E5%9B%9E%E9%A1%BE/ -&lt;h1 id="clean系统读书笔记两年项目回顾">Clean系统读书笔记——两年项目回顾&lt;/h1>
&lt;h2 id="0x1-引子">0x1 引子&lt;/h2>
&lt;p>这是一篇在快速浏览了一圈《Clean Code》《Refactoring》《Clean Coder》这三本书之后的读后感。仅作为一篇备忘录。&lt;/p>
&lt;p>在很早很早时候，开始准备转CS的时候就知道了Refactoring这本书，当时很简单地扫了一眼，就感觉很多东西都不明所以，要么就觉得，这不是本该就这样吗？于是就一直扔在网盘没再看过。&lt;/p>
&lt;p>软件工程 VS 建筑工程&lt;/p>
&lt;blockquote>
&lt;p>深思，结构设计与IT系统设计，都是一种系统设计，但是结构设计相对来说 约束比较明确，量化也很明确，干嘛的，负载多少，并且建筑设计已经进一步做了一层约束，所以到结构这边，整个外界的条件已经很丰富了，所以针对这个相对来说 应该有比较容易的解答了。相反，在IT系统这边，往往需求开始就是模糊的，体量也是预计的，往往后期会增加，还会有那些“灰色”流量。这些难以量化的约束，使得在整个系统设计上就变得很困难，因为没有万能的系统。并且系统能够承载的东西，往往随着时间会变得越来越丰富，这时候如果早期的设计比较局限，就可能要整体重构等等。在这种宽约束下的系统设计能力，需要好好锻炼。「一次交付和不断迭代的产品」—— by C. Gen&lt;/p>
&lt;/blockquote>
&lt;p>那么，就先从2018年开始回顾。&lt;/p>
&lt;h2 id="0x2-2018-function-works">0x2 &lt;strong>2018 Function works!&lt;/strong>&lt;/h2>
&lt;p>18年开始工作之后，一开始只是做一些很简单地Feature的增加，大约一个Feature只设计100行代码左右。所以基本就是在1-2个函数可以解决问题，也不太涉及OO方向的变更（采用系统本身的设计即可），所以在18年这个时间点上，主要是在函数层面做工作，各种类也是相对独立地使用，更多关注的是功能正常和简单的单元测试。&lt;/p>
&lt;p>除此以外，很多时间是在熟悉团队的各个系统的定义与功能，（&lt;a href="http://t.cn/A6AiEuUl">如何快速熟悉一个系统&lt;/a>）以及各种容器、工具（IDEA、Maven、Tomcat、Dubbo、Vue、Element、CI、Logback、Restful MVC、MyBatis&amp;hellip;）的熟悉了解。&lt;/p>
&lt;p>总结来说，2018年在熟悉基本工作外，在不断地打开(broaden)自己的知识网络。&lt;/p>
&lt;h2 id="0x3-2019-流程系统痛点解决大数据起步">0x3 &lt;strong>2019 流程系统，痛点解决，大数据起步&lt;/strong>&lt;/h2>
&lt;blockquote>
&lt;p>设计文档，流程图，UML，DDD&lt;/p>
&lt;/blockquote>
&lt;p>2019年开始，阴差阳错处于空档期，接了一个项目（当时其实就是很迫切地想做一些大一点的项目，来提升自己的能力，也没有对需求去做直接的评估）。现在回头再看，这个项目属于一个非常偏向业务的功能模块开发（从技术角度并没有太多需要考量的点，流量也是比较小的）。涉及到要开发的点有前端页面，中后台运营平台的开发，后台系统的业务流程（较复杂，场景较多）处理。&lt;/p>
&lt;p>当时，基本就和同事定了一下大体的功能点放在哪些模块，以及表结构的设计，就直接开始动手写了。设计文档无，流程图无，这导致后期开发维护都变得很困难，好在是在第三期的时候补充了不少。&lt;/p>
&lt;p>相比18年的函数级别的开发，这项目涉及到了多个系统，一条业务请求的多次变更，各种异步处理。要考虑地就更多了：核心类如何设计，每个流程的具体设计（需要由哪些类来支撑），系统与系统之间的交互设计等等（项目中涉及到Redis、MQ、RPC、DB这样四种方式来进行数据交互）。&lt;/p>
&lt;p>至此，让我充分意识到设计文档、流程图、UML等图文，对于一个项目的意义有多大了，它们不光指导了当前的开发工作，还为未来的迭代开发节约了大量的时间。&lt;/p>
&lt;p>PS. 由于流程复杂，单元测试也基本没怎么做，之后测试BUG较多。带有数据源的单元测试如何做？&lt;/p>
&lt;p>基于Mybatis，Jar包统一了多个系统的结果码合并逻辑。&lt;/p>
&lt;p>基于Dubbo Cluster SPI优化了规则发布效率。&lt;/p>
&lt;p>大数据起步，数据匹配、变量能效评估系统。Scala、Spark、Impala、Hive。&lt;/p>
&lt;p>总结来说，2019年在拓展知识（大数据）的同时，发现了自己的系统设计这一块的不足，简单了解了设计文档、UML、流程图、DDD、贫血模型等。此外，还算是比较努力地尝试改善了当前系统中地一些顽固点（职责收拢、提高性能）。&lt;/p>
&lt;h2 id="0x3-2020-高流量的实时系统设计">0x3 &lt;strong>2020 高流量的实时系统设计&lt;/strong>&lt;/h2>
&lt;blockquote>
&lt;p>实现细节文档，TDD，类单一职责（只有一个原因发生变更）、减少类之间的知识(class, function and etc.)共享坏味道的嗅觉开发指导&lt;/p>
&lt;/blockquote>
&lt;p>先提一嘴，在2020参与的一些面试中，发现对于Spring这一块的问题已经非常非常少了，问的最多的可能也就是AOP和事务实现这一块了。一方面是可能大家对于Spring这块较为熟悉了，另一方面是Spring在我看来已经越来越不适合目前大流量的场景（相对来说比较臃肿，对分布式这一块的原生支持也比较弱，尽管已经有了Spring Cloud），一些新的框架（如Vert.x、Micronaut等）在分布式这一块是在设计初期就考虑进去的。&lt;/p>
&lt;p>同时，在知乎一个问题上的一个问题——&lt;em>Spring是否代表着目前Java技术的顶峰，未来的Java将如何发展？&lt;/em>。我觉得这个问题下面有个回答很有意思，php之于Web开发，Spring之于Java是很类似的地位。&lt;/p>
&lt;p>总的一句话，不要抱着老的东西不放，但也要取其精华。&lt;/p>
&lt;p>2020年，注定是一个非同寻常的一年，今年到现在，主要就在围绕实时计算平台做工作。&lt;/p>
&lt;p>2月基本在做关于提高性能的预研工作（目前我们大系统都以同步调用为主，导致在IO这一块会浪费比较多的资源），因此在异步、协程这一块做了比较多的调研工作，这一块到时候可以单独写一篇文章聊一聊这些模型。总的来说异步回调的写法其实比较反人类，callback hell导致可读性急剧下降。协程本质是一种用户级的调度，免去了陷入到OS内核的开销，但是还是存在一定的overhead，所以性能层面讲异步回调还更好一些。另外还有几种针对并发的模型：Actor和CSP，这两个回避了过去共享内存的数据交互方式，采用消息来进行沟通。我感觉这两个更接近面向对象的思维，也贴近真实生活中人与人的协作方式（讲话、邮件）。&lt;/p>
&lt;p>3-4月就属于开始编码的阶段，最困难的还是类的设计（包括成员以及实现的函数）。就讲讲返工，以及代码让自己感觉比较geying的几个场景吧。&lt;/p>
&lt;ol>
&lt;li>计算实现的细节，从A-&amp;gt;B-&amp;gt;C，做了三版。A的主要问题是，内存计算与IO线程混用影响整体性能。B，从业务角度考虑，可用性较差。C，当前的实现，为了系统实现上的简化，仍然对业务提出了一些要求，但是目前认为较合理。&lt;/li>
&lt;li>对于系统内部全流程都使用的类，建议不要直接使用API包中的类，比较受限制。&lt;/li>
&lt;li>操作一个类中的数据，只能使用这个类提供的方法，而不能直接操作成员变量。（例如，getMap().put(key, value)，这种写法会让后期维护成本很大）&lt;/li>
&lt;li>不要过早重构（extract method、类的抽象），因为此时很多问题还没有真正暴露。&lt;/li>
&lt;li>异常定义也需要写进设计文档。&lt;/li>
&lt;li>不要试图复用同一个单元测试，如果要增加测试case，就直接新增。&lt;/li>
&lt;/ol>
&lt;p>总的来说，花2个月的时间来实现这个系统（底层代码是基于已有的工程修改），我认为是比较久了。那么，现在回顾想想有哪些方式可以提高效率的。&lt;/p>
&lt;ol>
&lt;li>模板工程。每次的工程搭建、CI、机器申请还是花了不少时间的。&lt;/li>
&lt;li>有计划性的功能实现排期。能够很清楚当前自己的进度，方便管理整个项目的进度，也容易对上反馈。&lt;/li>
&lt;li>TDD，测试驱动能够尽早发现细节问题，并及时反馈调整。另一方面，重构时，这些是基础保障。&lt;/li>
&lt;li>to be added.&lt;/li>
&lt;/ol>
&lt;h2 id="0x4-读书总结">0x4 &lt;strong>读书总结&lt;/strong>&lt;/h2>
&lt;p>本文初衷是想一下3天阅读的三本书的感想，《Clean Code》、《Clean Coder》、《Refactoring》。&lt;/p>
&lt;p>首先，这三本书都是针对工程实现而言的，属于软件工程(Software Engineering)范畴。Clean Code、Refactoring这两本书提供一些思路帮助你去写出较低复杂性的系统，其中Clean Code更偏向指导纲要，Refactoring则更偏向实操，从各种具体案例来说明如何解决类似的问题。Clean Coder则是关于如何做一名更专业的开发人员的书，覆盖面更广，深度也会浅不少。&lt;/p>
&lt;p>那就按喜好程度，分别讨论一下书上的内容吧！&lt;/p>
&lt;h3 id="refactoring">Refactoring（⭐⭐⭐⭐⭐）&lt;/h3>
&lt;p>选它排第一的有两点：1. 真真正正的一本可实操的cook book；2. 我们大多时候需要面对的是对已有系统的修改，所以需要用到重构的方式方法。&lt;/p>
&lt;p>虽然是一本很实在的cook book，但是作者仍然保留了总结性质的内容在开头。什么是重构？为什么需要重构？什么时候开始重构？这三个重要的问题，已经在书的第二章很详细的说明了。还有一点是关于&lt;strong>重构与间接层&lt;/strong>，很多重构的结果就是引入了间接层（中间层）来协助拆分以前过长的函数、过大的类，还能隔离变化，但是仍然一定程度上降低了代码的可读性。所以，虽然大部分重构是在增加间接层，但是仍有一部分重构会尝试消除一些不必要的间接层。同一个间接层，在系统的不同阶段会呈现出不一样的意义。&lt;/p>
&lt;p>第三章，作者总结了一些会影响系统可维护性、可阅读性的22个特征。我在这里简单再做几个关键词总结：过长、过大、重复、过多的耦合、类的变化不受控、继承、注释。&lt;/p>
&lt;p>后续第6-11章，作者从函数、类、表达式这三个方面提供了几十种重构的方式。&lt;/p>
&lt;p>最后，也是比较重要的，重构的基础是完备的自动化测试，有时重构不如重写。&lt;/p>
&lt;p>PS. 重构与设计模式的关系，很多重构的结构是实现了某一种设计模式，但是他们两个都不是目的，最终目的都是降低系统的复杂性。重构是一种脚踏实地的过程，设计模式更多是中间的副产品。&lt;/p>
&lt;h3 id="clean-code">Clean Code（⭐⭐⭐⭐）&lt;/h3>
&lt;p>这本书就像一本指导纲要，告诉你要在哪些方面注意，来维持系统较低的复杂度。但是，程序员总是希望有一些最佳实践（其实在系统设计这一块，很难有最佳实践）。所以，这本书也需要常读常新。&lt;/p>
&lt;p>目前看完我觉得可以多做参考是函数、对象和数据结构、类、单元测试这四章。&lt;/p>
&lt;p>我这次读完，感受最深的是单元测试这一章，它很大程度上提升了coder的信心。test之于生产代码，就像结构模型之于设计图，它能够验证你的想法，验证你的系统的可靠性（一定程度）。&lt;/p>
&lt;p>关于单元测试，首先是TDD以及它的实践三大定律。第二，测试代码的可读性。第三，每一个测试仅做一个概念的测试。其他，F.I.R.S.T，快速、独立、可重复、自验性、及时。&lt;/p>
&lt;h3 id="clean-coder">Clean Coder（⭐⭐⭐）&lt;/h3>
&lt;p>这本书，很多东西可能不太适应国内的当前环境。我把写的比较有共鸣的几章拿出来说一说。&lt;/p>
&lt;p>验收测试。需求的沟通细节，过早精细化（通用性较差），迟到的模糊性（无法实践，影响进度）。对完成的定义，有些认为写完代码=完成，有些认为测试通过=完成。如果采用TDD，其实写完代码也就意味着大部分测试已经通过了。&lt;/p>
&lt;p>团队与项目。一个有凝聚力的团队，可能会让你变成120%的那个你。&lt;/p>
&lt;p>如何对时间、压力进行管理。&lt;/p>
&lt;p>这本书，可以在碰到问题时找到相关的章节去看看有没有什么解决方案，不一定有用，至少可以帮助开拓一定的思路。&lt;/p>
&lt;p>相关大佬: Kent Beck; Martin Fowler; R. C. Martin&lt;/p>
- https://akelio-zhang.github.io/posts/2020clean%E7%B3%BB%E7%BB%9F%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%A4%E5%B9%B4%E9%A1%B9%E7%9B%AE%E5%9B%9E%E9%A1%BE/ - 2019-2022 Akelio All rights reserved.</description></item><item><title>Java传值方式讨论</title><link>https://akelio-zhang.github.io/posts/java%E4%BC%A0%E5%80%BC%E6%96%B9%E5%BC%8F%E7%9A%84%E8%AE%A8%E8%AE%BA/</link><pubDate>Sun, 27 Oct 2019 18:00:00 +0800</pubDate><guid>https://akelio-zhang.github.io/posts/java%E4%BC%A0%E5%80%BC%E6%96%B9%E5%BC%8F%E7%9A%84%E8%AE%A8%E8%AE%BA/</guid><description>LIFE CODER https://akelio-zhang.github.io/posts/java%E4%BC%A0%E5%80%BC%E6%96%B9%E5%BC%8F%E7%9A%84%E8%AE%A8%E8%AE%BA/ -&lt;p>起因是一次华为面试题&lt;/p>
&lt;blockquote>
&lt;p>Java在进行函数调用时，参数时传值还是传引用？&lt;/p>
&lt;/blockquote>
&lt;p>当时，我考虑的是Java变量只有两类，基本类型与引用类型，引用类型本质应该是属于指针。所以基本类型与引用类型的实参传递都是值本身，即创建一个副本赋予形参。面试官给的仅仅是笑而不语……&lt;/p>
&lt;p>而后在工作了一段时间回想这个问题并没有那么简单。&lt;/p>
&lt;p>碰到问题首先要给好定义才能进一步做分析。通过Wiki上关于&lt;a href="https://en.wikipedia.org/wiki/Evaluation_strategy">Evaluation strategy&lt;/a>的介绍，其中本文主要关注的这三种方式：call by value, call by reference and call by sharing。&lt;/p>
&lt;ol>
&lt;li>call by value即按值传参，将&lt;strong>实参创建一个新副本赋予形参&lt;/strong>，供函数使用，并且函数对参数的操作，对caller而言是不可见的，即immutable。&lt;/li>
&lt;li>call by reference即传引用，函数中的参数就是&lt;strong>对实参的直接引用&lt;/strong>，而不再是一份拷贝（也可以理解成是对实参的一个常量指针），因此是mutable的。&lt;/li>
&lt;li>call by sharing，认为该编程语言中所有值都基于对象而非原始类型。在传参过程中赋予形参的是&lt;strong>引用的拷贝&lt;/strong>。因为是引用的拷贝，所以函数体内只能对原对象进行操作，但是不能修改实参引用本身。所以对对象而言，这种传参方式是mutable的，但是对于引用本身，又是immutable的。&lt;/li>
&lt;/ol>
&lt;hr>
&lt;p>现在回头来看下C，C++和Java。&lt;/p>
&lt;p>C语言中策略很简单，一切均位call by value，尽管它有指针变量，但是它也是传的实参的拷贝。&lt;/p>
&lt;p>C++中出现了引用类型的变量，并且传参时也可以指定call by reference。如，&lt;code>void func(int&amp;amp; n)&lt;/code>&lt;/p>
&lt;p>Java当中考虑到指针的复杂性，于是直接砍掉了指针变量，只剩下了基本变量与引用变量，另外也不允许选择不同的传参方式。首先看基本变量，比较简单，就是call by value的表现。其次，对于引用变量而言，我们在函数可以对引用的对象进行操作，并且对caller是可见的，但是无法让实参引用到一个新的对象上去，即我们无法在函数中对实参进行assignment相关的操作，即引用本身是immutable的。这就是call by sharing。&lt;/p>
&lt;p>这里附上知乎一位答主的回答：&lt;/p>
&lt;blockquote>
&lt;p>综上所述，对于Java的函数调用方式最准确的描述是：&lt;strong>参数藉由值传递方式，传递的值是个引用。（句中两个“值”不是一个意思，第一个值是evaluation result，第二个值是value content）&lt;/strong>&lt;/p>
&lt;p>由于这个描述太绕，而且在字面上与Java总是传引用的事实冲突。于是对于Java，Python、Ruby、JavaScript等语言使用的这种求值策略，起了一个更贴切名字，叫&lt;a href="#Call_by_sharing">Call by sharing&lt;/a>。这个名字诞生于40年前。&lt;/p>
&lt;p>作者：Yolanda&lt;/p>
&lt;p>链接：https://www.zhihu.com/question/31203609/answer/112157038&lt;/p>
&lt;p>来源：知乎&lt;/p>
&lt;p>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;p>参考文献：&lt;/p>
&lt;ol>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Evaluation_strategy">https://en.wikipedia.org/wiki/Evaluation_strategy&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Reference_(computer_science)">https://en.wikipedia.org/wiki/Reference_(computer_science)&lt;/a>&lt;/li>
&lt;/ol>
- https://akelio-zhang.github.io/posts/java%E4%BC%A0%E5%80%BC%E6%96%B9%E5%BC%8F%E7%9A%84%E8%AE%A8%E8%AE%BA/ - 2019-2022 Akelio All rights reserved.</description></item></channel></rss>