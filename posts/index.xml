<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on LIFE CODER</title><link>https://akelio-zhang.github.io/posts/</link><description>Recent content in Posts on LIFE CODER</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>2019-2022 Akelio All rights reserved.</copyright><lastBuildDate>Fri, 18 Feb 2022 18:00:00 +0800</lastBuildDate><atom:link href="https://akelio-zhang.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>LeetCode 刷题指南</title><link>https://akelio-zhang.github.io/posts/2022leetcode-%E5%88%B7%E9%A2%98%E6%8C%87%E5%8D%97/</link><pubDate>Fri, 18 Feb 2022 18:00:00 +0800</pubDate><guid>https://akelio-zhang.github.io/posts/2022leetcode-%E5%88%B7%E9%A2%98%E6%8C%87%E5%8D%97/</guid><description>“刷题”的意义 刷题确实可能会让非常多人嗤之以鼻，但是没有办法，这一切都是市场决定的。如果要在这个市场生存，你只有两个选择，适应这条规则或者打破这条规则。如果我们可以打破这条规则，那说明我们拥有更大的价值，这当然很好。但是对于大多数人而言，可能或多或少会得刷一刷题。刷题一方面能让我们面试通过，另一方面也在过程中重温一些基础知识（可以不用再面对繁冗复杂的业务诉求）。
如何刷 笔者自己是从两条线分别出发刷题。一，按数据结构类型；二，按算法策略。从这两条线组织刷题顺序可以帮我们更快地构建起题与知识的映射关系。其实在面试解题过程中，关键要解决的就是破除题目本身的外壳，发现本质问题，属于什么类型的问题，需要用怎么样的数据结构与算法来解决。
现在LeetCode刷题已经非常方便了，并且本身社区也比较活跃。但是，额外的一些参考书籍对于我们的帮助也会非常大。下面罗列两本LeetCode题解。第一本101，是采用C++解题的，这本书的算法写的很容易理解，不像LC社区中很多人追求花哨——一行解题，意义不是很大。在面试过程，清晰的算法过程也是会给面试官比较好的音响。另一本Go写的题解，追求是算法性能，可以给我们拓宽思路，因为一道题解出来现在可能已经不是100分了，最佳的性能会让我们的面试更加突出。
LeetCode 题解参考 Doing positive things. - LeetCode 101 (changgy.com)
序 | LeetCode Cookbook (halfrost.com)
算法参考书 ⭐Algorithms, 4th Edition by Robert Sedgewick and Kevin Wayne (princeton.edu)
The Algorithm Design Manual (algorist.com)
⭐Algorithms by Jeff Erickson (illinois.edu)</description></item><item><title>[2022]MacBook Pro到手设置</title><link>https://akelio-zhang.github.io/posts/2022macbook-pro%E5%88%B0%E6%89%8B%E8%AE%BE%E7%BD%AE/</link><pubDate>Thu, 10 Feb 2022 12:00:00 +0800</pubDate><guid>https://akelio-zhang.github.io/posts/2022macbook-pro%E5%88%B0%E6%89%8B%E8%AE%BE%E7%BD%AE/</guid><description>效率 Office 365, Microsoft edge, Onedrive, Todo, Outlook Xmind Cubox Typora Sketch 开发者 Homebrew, https://brew.idayer.com/guide/ Stats Alfred Item2+ayu VS code extension copilot tabnine wakatime Terminal (item2) https://wyydsb.xin/Operations/terminal.html#zsh-sh Zsh-syntax-highlighting Zsh-autosuggestions Fzf with vim plugin .vimrc + vim plug tabnine by coc.nvim Java JetBrains IDEA extensions same as vs code. JDK (Java Download | Java 8, Java 11, Java 13 - Linux, Windows &amp;amp; macOS (azul.</description></item><item><title>[2021]Notion结束文字工作站的选择纠结</title><link>https://akelio-zhang.github.io/posts/2021notion/</link><pubDate>Thu, 27 Jan 2022 12:00:00 +0800</pubDate><guid>https://akelio-zhang.github.io/posts/2021notion/</guid><description>0x1 使用过的方案 有道云笔记（markdown支持太弱） Microsoft Todo（不太适合大量文字记载） 语雀（不适合临时想法记录） Typora/VS Code + Onedrive（文件之间的关联比较麻烦，没有统一的入口） 微信公众号（不适合个人内容记载，且使用起来比较麻烦，适合做推广） 0x2 场景整理 问题的解决方案往往要追溯到需求本身，不然只是在为了使用而使用，缺乏了创造力。
工作上对项目、系统的设计、开发、运维的文档落地与持续运维追踪。 读书笔记记录。 CS一些技术的学习笔记。 生活的一些行程安排或记录。 Todo List。 0x3 Notion，最大好处就是ALL IN ONE。 良好的Markdown支持 UI符合我的审美需求 能够支持大量文字输入 因为是web，天生跨平台 block，database，link的设计，能够满足绝大部分的知识库使用场景（场景2-4） 支持项目管理，可部分替代teambition（场景1） 支持Todo，可部分替代todo app（场景5） 有些遗憾 所有数据在线，尽管有了Github的备份和导出，但是没有一套本地持久化的方案总觉得并不安心。 没有标签系统 不支持快速的外部文章导入 0x4 目前的文字工作方式 DASHBOARD是所有内容的入口。
DASHBOARD展示的内容尽可能少，一般就是日常要做的、工作追踪、学习提升的三个入口。
Notion主要做有一些计划性的、需要有结果输出的文字工作。
每天使用Github进行备份 [H1]Todo来承载一些紧急类的工作记录（往往重要性不会太强）【可以用便利贴替代】
[H2]Xmind承担思维脑图，基本无可替代，数据用Onedrive管理。
[H3]备忘录只做个人信息备忘录，待办事项直接用todo/cubox解决。
[IN]cubox承载信息流的记录（手机、PC浏览器），替代之前的微信收藏、知乎收藏。</description></item><item><title>About Me</title><link>https://akelio-zhang.github.io/posts/about-me/</link><pubDate>Wed, 26 Jan 2022 18:00:00 +0800</pubDate><guid>https://akelio-zhang.github.io/posts/about-me/</guid><description>Coder &amp;amp; Photographer
我的设备 [计算设备]
*PC (i7-8700 + 32G + GTX 1066) with Dell 2720Q + Dell 2414H *NUC 11 (16G) with Dell 2520DR (workplace) *QNAP T453D mini with (512G + 256G + 4T) *ThinkPad T460s (i7-6600U + 8G) *RaspBerry 3 (for scheduling) [配件]
Filco 87 Black Anne Pro II (workplace) GPW G304 (workplace) Bose SoundLink Resolve BenQ ScreenBar Halo Xiaomi ScreenBar (workplace) [生活]
iPhone 11 Pro Max (256G) iPhone X (64G) iPad Pro 2019 12.</description></item><item><title>Git指南</title><link>https://akelio-zhang.github.io/posts/2021git%E6%8C%87%E5%8D%97/</link><pubDate>Mon, 03 Jan 2022 18:00:00 +0800</pubDate><guid>https://akelio-zhang.github.io/posts/2021git%E6%8C%87%E5%8D%97/</guid><description>零、目的 掌握各类场景下如何更好使用Git。 减少因为代码提交问题带来的生产环境问题。 Git几大工作区域一览
一、了解Git 什么是Git？ 一款分布式版本管理系统 优点：分布式、性能、版本的文件完整性 分布式，可以让你在本地提交代码（对于SVN而言没有网络就无法提交代码，在家也能愉快地写代码）； 性能，对于我们的一般项目而言，你感受不到合并时性能的差别（与SVN比较）； 版本的文件完整性：git背后设计理念是快照思想。 Git概念 仓库(repository) 用于代码版本管理 一个git仓库管理了三棵“树”，分别是 Working Directory（工作目录） Index（暂存区） HEAD（本地仓库） 大多数时候你通过编辑器只能对工作目录操作，操作其他两个“树”（区域）必须使用git命令才可以。 分支(branch) 用于并行独立开发，更方便管理不同开发任务的进度 Git常用命令 git add git commit git push git pull git branch git switch git restore 二、最常见的一种使用场景 陈主管说他已经开发好了整个架构，需要我去把几个功能实现一下，并提交到dev分支让他方便Review。
基本流程 先从远程服务器把代码拉到本地：git clone http://197.68.6.70/demo-project 此时你拥有的是主干master分支的代码，我们需要切换到dev分支进行开发： git fetch --all git switch --track origin/dev 在工作目录写代码 提交变更的文件到暂存区：git add &amp;lt;somefile&amp;gt; 提交文件到本地仓库：git commit -m &amp;quot;xxx&amp;quot; 把我的代码推送到远程仓库（同步）：git push 三、最佳实践——Git里的后悔药 我提交到暂存区的代码搞错了：git restore -S &amp;lt;files or dir&amp;gt; （在使用IDEA时，这个场景不太会出现，因为IDEA往往是把add 和 commit的操作会合并成一个处理） 我提交到本地仓库的代码搞错了： 最近的一个commit：git reset -mixed HEAD~1 历史中的一个commit： 使用 git reset --mixed &amp;lt;commit_id&amp;gt;，然后重新提交正确的代码（ ❗从最新commit到指定commit的代码都需要重新提交） 使用 git revert &amp;lt;commit_id&amp;gt; ，这个操作近似于自己重新提交代码 我提交到远程仓库的代码搞错了： 只有一个建议：请写出正确的代码，重新提交！所以，请在每次push之前谨慎！ 四、最佳实践——与他人同步 我想把别人在dev分支上开发的代码同步下来看看：git pull --rebase 或者 git pull （前者会让你的commit log更加清爽一些，没有一些额外的merge commit log） 如果你开发的分支和多人一同开发，建议每天进行一次 git pull --rebase 与 git push 五、最佳实践——我的改动比较大 建议自己拉一个分支进行开发 git switch -c &amp;lt;new_branch_name&amp;gt; 。 开发结束后，先把主开发分支合并到你的分支：git merge dev 没问题后再把你的分支合并到主开发分支：git switch dev ，git merge &amp;lt;new_branch_name&amp;gt; 六、其他 ⭐准备上线前 和上一个版本代码对比(git diff release master)，确认release分支是正确的需要上线的代码 使用Jenkins对release分支进行自动打包与部署，在工作空间获取上线代码包（禁止本地打包） 上线完成后 在gitlab上提交release合并至master分支的merge request，由技术经理确认合并； 对最新的master分支进行tag，方便反查源码； 七、几个原则 强制 禁止git push -f 禁止git push master 建议 建议分支命名：master、release、dev、dev_xx master分支为线上正在运行的代码；不允许手动提交；只能通过页面的merge request进行代码合并；每次上完线后把分支(release)代码合并到master release为测试环境对应的代码，jenkins均从该分支进行自动构建与部署 dev，以及其他分支为开发分支，较为自由。 减少对git checkout的使用，已经拆分为 git switch 和 git restore 不要把二进制文件放到git仓库中进行版本管理 八、实现方式之数据结构 在Git当中，</description></item><item><title>[2020]互联网技术社招总结</title><link>https://akelio-zhang.github.io/posts/2020%E4%BA%92%E8%81%94%E7%BD%91%E6%8A%80%E6%9C%AF%E7%A4%BE%E6%8B%9B%E6%80%BB%E7%BB%93/</link><pubDate>Sun, 28 Mar 2021 18:00:00 +0000</pubDate><guid>https://akelio-zhang.github.io/posts/2020%E4%BA%92%E8%81%94%E7%BD%91%E6%8A%80%E6%9C%AF%E7%A4%BE%E6%8B%9B%E6%80%BB%E7%BB%93/</guid><description>准备 用人单位招聘诉求 对于每个用人单位来说，他们有两个诉求：1.招聘到能够立马(尽快)胜任工作并解决业务痛点的人；2.减少用人成本。
往往第二点是和招聘人利益是冲突的，所以我们只能通过第一点来进行突破，也就是大家常说的你要和你的岗位有较高的匹配度。
对于互联网岗位软件工程师来说，我认为有三方面可以讨论匹配度：1.技术理解深度；2.业务场景理解以及抽象转换的能力；3.团队管理能力。
简历完善 简历是面试双方的书面信息，其目的是为了使得面试官对面试者产生好奇心，且协助双方在面试过程更有内容可说。因此，可以从以下几个角度思考简历是否可以进一步优化。简历虽然很重要，但是也没必要说做到尽善尽美，主要原则还是信息准确以及一定的美观。
信息是否罗列明确且无缺失。 可量化的地方尽可能做量化。 个人特色是否体现在简历之上(最好是对工作有贡献的)。 内容是否与目标岗位有比较好的匹配度。 个人状况 在做面试准备之前，先要了解个人的软硬技能方面的状况来发现匹配度上的差异，以做针对性的准备。
面试准备 在面试中，往往会有以下几块内容的沟通：个人介绍、项目介绍、算法题、系统设计题、专业知识、技术方案、向面试官提问。系统设计题往往出现在后面几轮部门领导的面试，算法、专业知识则通常出现在第一二轮。技术方案则都会有所涉及。
在社招中，大部分公司会更注重你过往的项目经历，且会在项目上挖掘你的专业知识以及难点技术方案。所以这一块需要深入剖析，包括技术方案、业务场景、拥抱变化的能力(高可用、高并发)等常见的互联网应用的问题。
由于近些年计算机大厂竞争愈发激烈，算法题与专业知识也经常单独进行考察。算法题一般就刷LeetCode中等就可以；专业知识包括数据结构、操作系统、网络、你的主语言使用理解等。
对于向面试官提问，有人说很重要，但是我认为这往往是锦上添花的效果。主导你拿到offer的还是前面提到的基本面。这一块通常体现了你对这份工作的向往程度。
贵司一天工作的时间线大概是怎么样的？
印象最深的一次工作内容是什么？
最近加班频繁吗？
最后，一场面试，当你说话的时间占比越大，往往就越有可能顺利通过。
过程 中小厂 中小厂对人的要求很直白，能干活，最好技术栈比较贴合，如果面试者过往接触的业务一致性一样就更好了。笔者经历了杭州的一家互联网券商的面试，整体体验感难度适中，问题也都比较贴合实际开发过程会碰到的问题。这也可能是因为整体技术栈重合度较高的原因。算法题、专业知识、技术方案（并发、消息、缓存、Scala）。没有涉及系统设计。
大厂 国内大厂面试风格分为两派，项目技术方案为主与算法为主。前者主要在于项目这一块会问的非常深入，并随之伴随各类技术方案的讨论，强调实战经验。后者对于社招也要提出相当的算法与专业知识的要求，以便于进行高效的过滤。
大厂的算法题会结合更实际的场景来出题，而非LeetCode的原题。比如，提供一天登录登出日志文件(time, uid, action)，问如何计算得到在线人数峰值时间点以及90%峰位时间点。
大厂的项目介绍与技术方案往往是大头部分，面试官会从各个角度来测试你工作的含金量与价值。业务问题如何抽象设计、系统如何拆分设计、如何应对未来的大流量、中间件的选择考虑点等。这块可以参考system-design-primer。
外企 外企确实与国内企业差别很大，面试体验感很不错，你会感觉到你被认真对待。往往会在1天完成所有的面试。面试轮次会在3-4次。笔者面试的岗位更偏向于业务部门，所有问题都围绕实际场景展开。比如，算法题是设计一个类，提供两个操作：记录当前系统的负载和返回近5分钟的平均负载。另一个是设计一个命令行工具，实现对参数的读取与处理。
外企社招时对员工的要求普遍较高，并非单靠刷题就可以。比如在系统题中会考察如何进行项目管理，如何测试，如何运维等等非常全面的问题。另一方面，由于外企的产品往往面向全球，会有诸如如何解决多地数据中心同步的问题、攻击网关设计等国际化的问题。
结论 在面试的准备与进行过程中，是对我们自己过往的一次总结与提升。面试失败也不必过于难过，不是每个面试官都是那么专业，也可能是你与这家公司这个岗位目前仍然不那么契合。
每一个人有每一个人的特色与优劣势，每一家公司有每一家公司的喜好。我们能做的就是保持自信，扬长避短，以一种积极友善的态度把握整个面试过程的主动性（比如有些面试官说让你简单说说xxx，此时若是你擅长的，你应该抓住机会表现出你的特色）
站在巨人的肩膀上 校招面试不完全指南 怎样花两年时间去面试一个人</description></item><item><title>系统复杂度-1</title><link>https://akelio-zhang.github.io/posts/2020%E7%B3%BB%E7%BB%9F%E5%A4%8D%E6%9D%82%E5%BA%A6-1/</link><pubDate>Sat, 06 Jun 2020 18:00:00 +0000</pubDate><guid>https://akelio-zhang.github.io/posts/2020%E7%B3%BB%E7%BB%9F%E5%A4%8D%E6%9D%82%E5%BA%A6-1/</guid><description>0x1 Introduction 当你接手一个不熟悉的系统的时候，你可能想找一下系统文档（但是已经很久没更新了）；你可能想看一下有没有单元测试（很多根本跑不起来了）；这时候，除了问同事，只能自己从几千几万行代码中开始摸索。
当你开发一个新系统的时候，由于某些原因需要调整局部的逻辑，因为没有相应的单元测试，结果在移交给测试后才发现各种顾此失彼的bug出现了。
当你的系统性能已经无法再满足时，又或者系统的迭代成本异常大时，此时就会可能需要重写或重构。此时，由于没有单元测试，自动化集成测试，你不得不拉上更多的同事来参与此次系统优化，以保证系统的可靠性。
当你的系统需要有新的客户接入时，因为没有最新的系统文档或使用说明书，你只能电话、口头地来教别人怎么接入你的系统。
上述的几个场景，都是因为系统的配套设施（文档、测试）没有同步完善，引起接入、迭代、重构的成本显著增加。这不是我们想看到的。相对地，系统的快速迭代的开发模式已经受到了广泛的认同，我们怎么在这个过程能够一直保持高效、可靠的输出呢？对于这个问题，本文尝试从系统复杂度、重构、设计模式、测试这几个角度来讨论这个问题，希望能给大家一些新的思考。
0x2 系统复杂度 首先，算法有复杂度一说，在所有的算法课程基本都会在前1-2章围绕这个话题展开详细的定义与分析讨论。算法复杂度一般分为时间复杂度与空间复杂度，可以说是该算法解决问题的时间与空间成本。
在工作上，我们维护的往往是一个系统，一个工程。一个系统的复杂度定义，似乎并不是那么容易。本章节大多数内容来源于A Philosiphy of Software Designing。这本书中对于系统的复杂度定义非常的实际，软件系统结构中让其变得难以理解且难以变更的部分组成了系统的复杂性。回顾本文引子部分，其实都是系统难以理解、难以修改导致的结果。
这个定义相对于算法复杂度而言，显得非常主观，没有客观的评估准则，各个人的理解也会大相径庭。因此，书中进一步展开了几种复杂性症状。
变化放大(change amplication)：当你需要改动某一个逻辑时，会涉及到多处代码变更。 认知负担(cognitive load)：有时尽管只写了很少的代码，但是对于他人来说异常难以理解，请尝试将它改写成容易理解的方式。 不可知(unknown unknowns)：不知道哪里有坑存在，就算BUG出现了。 总的来说，控制住整个系统的复杂度，将是保障我们高效、可靠工作的核心。低复杂度的系统，大大降低了开发过程中的心智压力。
0x3 测试 为什么要把测试放在靠前的位置呢？测试是将一直伴随在生产代码演进的，是软件的可靠性保证的重要工具。
拿建筑工程做一个类比，设计一幢房屋时，对于设计人员，最终产出的是施工图。那么，它的设计依据是什么呢？《规范》与模型的承载能力分析。前者，描述了什么类型的结构需要怎么样的设计，这种属于基本要求。后者，通过基于物理建模软件进行专门的结构性能分析，来确保本次设计的可靠性。
软件工程相比建筑工程，非常年轻，一方面没有条条框框地规则（P3C也仅仅是一些基础性条约）；另一方面，因为大部分软件工程不涉及生命财产，也可以通过快速更新来解决问题，所以导致大多数人对可靠性的关注度远不如建筑工程。先不说这样的态度容易使生产问题频发，另外也会让你的工作开展体验感相对差劲，总是在返工。
因此，我们需要在注重软件的可靠性。我们的第一个工具就是（自动化）测试。好的测试，就能够有效地模拟真实地业务场景，来校验代码的正确性。好的测试，能够让新加入的开发人员更容易理解系统是如何使用的。好的测试，能够促进系统架构的合理化——高内聚低耦合。但是，好的测试代码并不容易写，因为测试代码的思考方式与一般的coding并不一样，它更像是生产代码的前置条件、运行场景。
测试通常分为四个层次：单元测试（Unit Testing）、集成测试（Integration Testing）、系统测试（System Testing）、验收测试（Acceptance Testing）。其中离开发最近的是单元测试，一般覆盖的是函数以及类的功能正确性。集成测试则是对系统内部的各模块之间的协作是否正确，通常按内部接口进行覆盖测试。系统测试则是验证对外接口能否在各种情况下能够正常地运行（性能测试也属于这一层次）。验收测试属于辅助性的测试，范围也相对更广，不同的系统也会需要不同的验收测试，例如安全测试、易用性测试、兼容性测试等等。
这里我们主要谈一下单元测试，因为这是所有测试的基本面，也是开发人员所需要特别关注的地方。先考虑一下是先写生产代码还是先写测试代码。第一个角度是，当然是先写生产代码了，没有生产代码怎么测试呢？第二个角度是，先写测试代码再写生产代码，因为测试代码是功能的运行场景，只有先把这些前置条件搞清楚了，才能写出正确的生产代码。也许你会说，我可以先大脑过一下基本场景，然后再写生产代码，再写测试代码，这应该是大部分人目前的方式，但是不知道你有没有发现，这种方式写出来的测试代码往往会因为前期的假设导致覆盖率很低。
在2003年，Kent Beck提出了Test-Driven development（TDD）这样一种开发模式。
添加一个测试 运行所有测试，是否有失败 一旦有失败的测试，就开始写生产代码，直到该测试通过为止。 所有测试通过后，就必须开始写测试代码，直到有一个测试无法通过。 可能，你会觉得这样非常耗时，但是你得明确，你在一个功能开发的耗时并不仅仅是写了那一堆生产代码而已，还包括测试、代码修复等等。所以，这种方式只是将一些顺序进行了调换，却能为最终的正确性铺垫很多。
0x4 重构 重构与重写都是试图优化系统复杂度的方式，在不同的场景（代码状况、工期等）会选择不同的方式，但是大多时候会采用重构的方式来实现。
先来看一下wikipedia对重构的定义：
In computer programming and software design, code refactoring is the process of restructuring existing computer code—changing the factoring—without changing its external behavior.</description></item><item><title>Java传值方式讨论</title><link>https://akelio-zhang.github.io/posts/java%E4%BC%A0%E5%80%BC%E6%96%B9%E5%BC%8F%E7%9A%84%E8%AE%A8%E8%AE%BA/</link><pubDate>Sun, 27 Oct 2019 18:00:00 +0800</pubDate><guid>https://akelio-zhang.github.io/posts/java%E4%BC%A0%E5%80%BC%E6%96%B9%E5%BC%8F%E7%9A%84%E8%AE%A8%E8%AE%BA/</guid><description>起因是一次华为面试题
Java在进行函数调用时，参数时传值还是传引用？
当时，我考虑的是Java变量只有两类，基本类型与引用类型，引用类型本质应该是属于指针。所以基本类型与引用类型的实参传递都是值本身，即创建一个副本赋予形参。面试官给的仅仅是笑而不语……
而后在工作了一段时间回想这个问题并没有那么简单。
碰到问题首先要给好定义才能进一步做分析。通过Wiki上关于Evaluation strategy的介绍，其中本文主要关注的这三种方式：call by value, call by reference and call by sharing。
call by value即按值传参，将实参创建一个新副本赋予形参，供函数使用，并且函数对参数的操作，对caller而言是不可见的，即immutable。 call by reference即传引用，函数中的参数就是对实参的直接引用，而不再是一份拷贝（也可以理解成是对实参的一个常量指针），因此是mutable的。 call by sharing，认为该编程语言中所有值都基于对象而非原始类型。在传参过程中赋予形参的是引用的拷贝。因为是引用的拷贝，所以函数体内只能对原对象进行操作，但是不能修改实参引用本身。所以对对象而言，这种传参方式是mutable的，但是对于引用本身，又是immutable的。 现在回头来看下C，C++和Java。
C语言中策略很简单，一切均位call by value，尽管它有指针变量，但是它也是传的实参的拷贝。
C++中出现了引用类型的变量，并且传参时也可以指定call by reference。如，void func(int&amp;amp; n)
Java当中考虑到指针的复杂性，于是直接砍掉了指针变量，只剩下了基本变量与引用变量，另外也不允许选择不同的传参方式。首先看基本变量，比较简单，就是call by value的表现。其次，对于引用变量而言，我们在函数可以对引用的对象进行操作，并且对caller是可见的，但是无法让实参引用到一个新的对象上去，即我们无法在函数中对实参进行assignment相关的操作，即引用本身是immutable的。这就是call by sharing。
这里附上知乎一位答主的回答：
综上所述，对于Java的函数调用方式最准确的描述是：参数藉由值传递方式，传递的值是个引用。（句中两个“值”不是一个意思，第一个值是evaluation result，第二个值是value content）
由于这个描述太绕，而且在字面上与Java总是传引用的事实冲突。于是对于Java，Python、Ruby、JavaScript等语言使用的这种求值策略，起了一个更贴切名字，叫Call by sharing。这个名字诞生于40年前。
作者：Yolanda
链接：https://www.zhihu.com/question/31203609/answer/112157038
来源：知乎
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
参考文献：
https://en.wikipedia.org/wiki/Evaluation_strategy https://en.wikipedia.org/wiki/Reference_(computer_science)</description></item></channel></rss>